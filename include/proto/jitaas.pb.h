// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jitaas.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_jitaas_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_jitaas_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_jitaas_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_jitaas_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jitaas_2eproto;
class CodeRequest;
struct CodeRequestDefaultTypeInternal;
extern CodeRequestDefaultTypeInternal _CodeRequest_default_instance_;
class CompilationRequest;
struct CompilationRequestDefaultTypeInternal;
extern CompilationRequestDefaultTypeInternal _CompilationRequest_default_instance_;
class FunctionIndices;
struct FunctionIndicesDefaultTypeInternal;
extern FunctionIndicesDefaultTypeInternal _FunctionIndices_default_instance_;
class FunctionType;
struct FunctionTypeDefaultTypeInternal;
extern FunctionTypeDefaultTypeInternal _FunctionType_default_instance_;
class IndicesRequest;
struct IndicesRequestDefaultTypeInternal;
extern IndicesRequestDefaultTypeInternal _IndicesRequest_default_instance_;
class NativeBinary;
struct NativeBinaryDefaultTypeInternal;
extern NativeBinaryDefaultTypeInternal _NativeBinary_default_instance_;
class WasmFunction;
struct WasmFunctionDefaultTypeInternal;
extern WasmFunctionDefaultTypeInternal _WasmFunction_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CodeRequest* Arena::CreateMaybeMessage<::CodeRequest>(Arena*);
template<> ::CompilationRequest* Arena::CreateMaybeMessage<::CompilationRequest>(Arena*);
template<> ::FunctionIndices* Arena::CreateMaybeMessage<::FunctionIndices>(Arena*);
template<> ::FunctionType* Arena::CreateMaybeMessage<::FunctionType>(Arena*);
template<> ::IndicesRequest* Arena::CreateMaybeMessage<::IndicesRequest>(Arena*);
template<> ::NativeBinary* Arena::CreateMaybeMessage<::NativeBinary>(Arena*);
template<> ::WasmFunction* Arena::CreateMaybeMessage<::WasmFunction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class IndicesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndicesRequest) */ {
 public:
  inline IndicesRequest() : IndicesRequest(nullptr) {}
  ~IndicesRequest() override;
  explicit constexpr IndicesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndicesRequest(const IndicesRequest& from);
  IndicesRequest(IndicesRequest&& from) noexcept
    : IndicesRequest() {
    *this = ::std::move(from);
  }

  inline IndicesRequest& operator=(const IndicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndicesRequest& operator=(IndicesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndicesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndicesRequest* internal_default_instance() {
    return reinterpret_cast<const IndicesRequest*>(
               &_IndicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IndicesRequest& a, IndicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IndicesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndicesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndicesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IndicesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndicesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndicesRequest";
  }
  protected:
  explicit IndicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 1,
  };
  // string module_name = 1;
  void clear_module_name();
  const std::string& module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);
  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(const std::string& value);
  std::string* _internal_mutable_module_name();
  public:

  // @@protoc_insertion_point(class_scope:IndicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jitaas_2eproto;
};
// -------------------------------------------------------------------

class FunctionIndices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FunctionIndices) */ {
 public:
  inline FunctionIndices() : FunctionIndices(nullptr) {}
  ~FunctionIndices() override;
  explicit constexpr FunctionIndices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionIndices(const FunctionIndices& from);
  FunctionIndices(FunctionIndices&& from) noexcept
    : FunctionIndices() {
    *this = ::std::move(from);
  }

  inline FunctionIndices& operator=(const FunctionIndices& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionIndices& operator=(FunctionIndices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionIndices& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionIndices* internal_default_instance() {
    return reinterpret_cast<const FunctionIndices*>(
               &_FunctionIndices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FunctionIndices& a, FunctionIndices& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionIndices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionIndices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionIndices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionIndices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionIndices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionIndices& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionIndices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FunctionIndices";
  }
  protected:
  explicit FunctionIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuncCountFieldNumber = 1,
    kMainIdxFieldNumber = 2,
    kStartIdxFieldNumber = 3,
  };
  // uint32 func_count = 1;
  void clear_func_count();
  uint32_t func_count() const;
  void set_func_count(uint32_t value);
  private:
  uint32_t _internal_func_count() const;
  void _internal_set_func_count(uint32_t value);
  public:

  // uint32 main_idx = 2;
  void clear_main_idx();
  uint32_t main_idx() const;
  void set_main_idx(uint32_t value);
  private:
  uint32_t _internal_main_idx() const;
  void _internal_set_main_idx(uint32_t value);
  public:

  // optional uint32 start_idx = 3;
  bool has_start_idx() const;
  private:
  bool _internal_has_start_idx() const;
  public:
  void clear_start_idx();
  uint32_t start_idx() const;
  void set_start_idx(uint32_t value);
  private:
  uint32_t _internal_start_idx() const;
  void _internal_set_start_idx(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FunctionIndices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t func_count_;
  uint32_t main_idx_;
  uint32_t start_idx_;
  friend struct ::TableStruct_jitaas_2eproto;
};
// -------------------------------------------------------------------

class FunctionType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FunctionType) */ {
 public:
  inline FunctionType() : FunctionType(nullptr) {}
  ~FunctionType() override;
  explicit constexpr FunctionType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionType(const FunctionType& from);
  FunctionType(FunctionType&& from) noexcept
    : FunctionType() {
    *this = ::std::move(from);
  }

  inline FunctionType& operator=(const FunctionType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionType& operator=(FunctionType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionType& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionType* internal_default_instance() {
    return reinterpret_cast<const FunctionType*>(
               &_FunctionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FunctionType& a, FunctionType& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FunctionType";
  }
  protected:
  explicit FunctionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamTypesFieldNumber = 2,
    kParamCountFieldNumber = 1,
    kReturnCountFieldNumber = 3,
    kReturnTypeFieldNumber = 4,
  };
  // repeated uint32 param_types = 2;
  int param_types_size() const;
  private:
  int _internal_param_types_size() const;
  public:
  void clear_param_types();
  private:
  uint32_t _internal_param_types(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_param_types() const;
  void _internal_add_param_types(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_param_types();
  public:
  uint32_t param_types(int index) const;
  void set_param_types(int index, uint32_t value);
  void add_param_types(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      param_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_param_types();

  // uint32 param_count = 1;
  void clear_param_count();
  uint32_t param_count() const;
  void set_param_count(uint32_t value);
  private:
  uint32_t _internal_param_count() const;
  void _internal_set_param_count(uint32_t value);
  public:

  // uint32 return_count = 3;
  void clear_return_count();
  uint32_t return_count() const;
  void set_return_count(uint32_t value);
  private:
  uint32_t _internal_return_count() const;
  void _internal_set_return_count(uint32_t value);
  public:

  // optional uint32 return_type = 4;
  bool has_return_type() const;
  private:
  bool _internal_has_return_type() const;
  public:
  void clear_return_type();
  uint32_t return_type() const;
  void set_return_type(uint32_t value);
  private:
  uint32_t _internal_return_type() const;
  void _internal_set_return_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FunctionType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > param_types_;
  mutable std::atomic<int> _param_types_cached_byte_size_;
  uint32_t param_count_;
  uint32_t return_count_;
  uint32_t return_type_;
  friend struct ::TableStruct_jitaas_2eproto;
};
// -------------------------------------------------------------------

class CompilationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CompilationRequest) */ {
 public:
  inline CompilationRequest() : CompilationRequest(nullptr) {}
  ~CompilationRequest() override;
  explicit constexpr CompilationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompilationRequest(const CompilationRequest& from);
  CompilationRequest(CompilationRequest&& from) noexcept
    : CompilationRequest() {
    *this = ::std::move(from);
  }

  inline CompilationRequest& operator=(const CompilationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompilationRequest& operator=(CompilationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompilationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompilationRequest* internal_default_instance() {
    return reinterpret_cast<const CompilationRequest*>(
               &_CompilationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CompilationRequest& a, CompilationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompilationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompilationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompilationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompilationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompilationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CompilationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompilationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CompilationRequest";
  }
  protected:
  explicit CompilationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 1,
    kArchitectureFieldNumber = 2,
    kTargetDataLayoutFieldNumber = 4,
    kFuncIdxFieldNumber = 3,
    kProgramPointerSizeFieldNumber = 5,
  };
  // string module_name = 1;
  void clear_module_name();
  const std::string& module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);
  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(const std::string& value);
  std::string* _internal_mutable_module_name();
  public:

  // string architecture = 2;
  void clear_architecture();
  const std::string& architecture() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_architecture(ArgT0&& arg0, ArgT... args);
  std::string* mutable_architecture();
  PROTOBUF_NODISCARD std::string* release_architecture();
  void set_allocated_architecture(std::string* architecture);
  private:
  const std::string& _internal_architecture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_architecture(const std::string& value);
  std::string* _internal_mutable_architecture();
  public:

  // string target_data_layout = 4;
  void clear_target_data_layout();
  const std::string& target_data_layout() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_data_layout(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_data_layout();
  PROTOBUF_NODISCARD std::string* release_target_data_layout();
  void set_allocated_target_data_layout(std::string* target_data_layout);
  private:
  const std::string& _internal_target_data_layout() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_data_layout(const std::string& value);
  std::string* _internal_mutable_target_data_layout();
  public:

  // uint32 func_idx = 3;
  void clear_func_idx();
  uint32_t func_idx() const;
  void set_func_idx(uint32_t value);
  private:
  uint32_t _internal_func_idx() const;
  void _internal_set_func_idx(uint32_t value);
  public:

  // uint32 program_pointer_size = 5;
  void clear_program_pointer_size();
  uint32_t program_pointer_size() const;
  void set_program_pointer_size(uint32_t value);
  private:
  uint32_t _internal_program_pointer_size() const;
  void _internal_set_program_pointer_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CompilationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr architecture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_data_layout_;
  uint32_t func_idx_;
  uint32_t program_pointer_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jitaas_2eproto;
};
// -------------------------------------------------------------------

class CodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CodeRequest) */ {
 public:
  inline CodeRequest() : CodeRequest(nullptr) {}
  ~CodeRequest() override;
  explicit constexpr CodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CodeRequest(const CodeRequest& from);
  CodeRequest(CodeRequest&& from) noexcept
    : CodeRequest() {
    *this = ::std::move(from);
  }

  inline CodeRequest& operator=(const CodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CodeRequest& operator=(CodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CodeRequest* internal_default_instance() {
    return reinterpret_cast<const CodeRequest*>(
               &_CodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CodeRequest& a, CodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CodeRequest";
  }
  protected:
  explicit CodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 1,
    kFuncIdxFieldNumber = 2,
  };
  // string module_name = 1;
  void clear_module_name();
  const std::string& module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);
  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(const std::string& value);
  std::string* _internal_mutable_module_name();
  public:

  // uint32 func_idx = 2;
  void clear_func_idx();
  uint32_t func_idx() const;
  void set_func_idx(uint32_t value);
  private:
  uint32_t _internal_func_idx() const;
  void _internal_set_func_idx(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
  uint32_t func_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jitaas_2eproto;
};
// -------------------------------------------------------------------

class WasmFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WasmFunction) */ {
 public:
  inline WasmFunction() : WasmFunction(nullptr) {}
  ~WasmFunction() override;
  explicit constexpr WasmFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WasmFunction(const WasmFunction& from);
  WasmFunction(WasmFunction&& from) noexcept
    : WasmFunction() {
    *this = ::std::move(from);
  }

  inline WasmFunction& operator=(const WasmFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline WasmFunction& operator=(WasmFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WasmFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const WasmFunction* internal_default_instance() {
    return reinterpret_cast<const WasmFunction*>(
               &_WasmFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WasmFunction& a, WasmFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(WasmFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WasmFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WasmFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WasmFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WasmFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WasmFunction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WasmFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WasmFunction";
  }
  protected:
  explicit WasmFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuncBodyFieldNumber = 3,
    kFuncTypeFieldNumber = 2,
    kIsImportedFieldNumber = 1,
  };
  // bytes func_body = 3;
  void clear_func_body();
  const std::string& func_body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_func_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_func_body();
  PROTOBUF_NODISCARD std::string* release_func_body();
  void set_allocated_func_body(std::string* func_body);
  private:
  const std::string& _internal_func_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_func_body(const std::string& value);
  std::string* _internal_mutable_func_body();
  public:

  // .FunctionType func_type = 2;
  bool has_func_type() const;
  private:
  bool _internal_has_func_type() const;
  public:
  void clear_func_type();
  const ::FunctionType& func_type() const;
  PROTOBUF_NODISCARD ::FunctionType* release_func_type();
  ::FunctionType* mutable_func_type();
  void set_allocated_func_type(::FunctionType* func_type);
  private:
  const ::FunctionType& _internal_func_type() const;
  ::FunctionType* _internal_mutable_func_type();
  public:
  void unsafe_arena_set_allocated_func_type(
      ::FunctionType* func_type);
  ::FunctionType* unsafe_arena_release_func_type();

  // bool is_imported = 1;
  void clear_is_imported();
  bool is_imported() const;
  void set_is_imported(bool value);
  private:
  bool _internal_is_imported() const;
  void _internal_set_is_imported(bool value);
  public:

  // @@protoc_insertion_point(class_scope:WasmFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr func_body_;
  ::FunctionType* func_type_;
  bool is_imported_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jitaas_2eproto;
};
// -------------------------------------------------------------------

class NativeBinary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NativeBinary) */ {
 public:
  inline NativeBinary() : NativeBinary(nullptr) {}
  ~NativeBinary() override;
  explicit constexpr NativeBinary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NativeBinary(const NativeBinary& from);
  NativeBinary(NativeBinary&& from) noexcept
    : NativeBinary() {
    *this = ::std::move(from);
  }

  inline NativeBinary& operator=(const NativeBinary& from) {
    CopyFrom(from);
    return *this;
  }
  inline NativeBinary& operator=(NativeBinary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NativeBinary& default_instance() {
    return *internal_default_instance();
  }
  static inline const NativeBinary* internal_default_instance() {
    return reinterpret_cast<const NativeBinary*>(
               &_NativeBinary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NativeBinary& a, NativeBinary& b) {
    a.Swap(&b);
  }
  inline void Swap(NativeBinary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NativeBinary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NativeBinary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NativeBinary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NativeBinary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NativeBinary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NativeBinary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NativeBinary";
  }
  protected:
  explicit NativeBinary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataBytesFieldNumber = 1,
    kDataLengthFieldNumber = 2,
  };
  // bytes data_bytes = 1;
  void clear_data_bytes();
  const std::string& data_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_bytes();
  PROTOBUF_NODISCARD std::string* release_data_bytes();
  void set_allocated_data_bytes(std::string* data_bytes);
  private:
  const std::string& _internal_data_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_bytes(const std::string& value);
  std::string* _internal_mutable_data_bytes();
  public:

  // uint32 data_length = 2;
  void clear_data_length();
  uint32_t data_length() const;
  void set_data_length(uint32_t value);
  private:
  uint32_t _internal_data_length() const;
  void _internal_set_data_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NativeBinary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_bytes_;
  uint32_t data_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jitaas_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IndicesRequest

// string module_name = 1;
inline void IndicesRequest::clear_module_name() {
  module_name_.ClearToEmpty();
}
inline const std::string& IndicesRequest::module_name() const {
  // @@protoc_insertion_point(field_get:IndicesRequest.module_name)
  return _internal_module_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndicesRequest::set_module_name(ArgT0&& arg0, ArgT... args) {
 
 module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndicesRequest.module_name)
}
inline std::string* IndicesRequest::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:IndicesRequest.module_name)
  return _s;
}
inline const std::string& IndicesRequest::_internal_module_name() const {
  return module_name_.Get();
}
inline void IndicesRequest::_internal_set_module_name(const std::string& value) {
  
  module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IndicesRequest::_internal_mutable_module_name() {
  
  return module_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IndicesRequest::release_module_name() {
  // @@protoc_insertion_point(field_release:IndicesRequest.module_name)
  return module_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IndicesRequest::set_allocated_module_name(std::string* module_name) {
  if (module_name != nullptr) {
    
  } else {
    
  }
  module_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (module_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndicesRequest.module_name)
}

// -------------------------------------------------------------------

// FunctionIndices

// uint32 func_count = 1;
inline void FunctionIndices::clear_func_count() {
  func_count_ = 0u;
}
inline uint32_t FunctionIndices::_internal_func_count() const {
  return func_count_;
}
inline uint32_t FunctionIndices::func_count() const {
  // @@protoc_insertion_point(field_get:FunctionIndices.func_count)
  return _internal_func_count();
}
inline void FunctionIndices::_internal_set_func_count(uint32_t value) {
  
  func_count_ = value;
}
inline void FunctionIndices::set_func_count(uint32_t value) {
  _internal_set_func_count(value);
  // @@protoc_insertion_point(field_set:FunctionIndices.func_count)
}

// uint32 main_idx = 2;
inline void FunctionIndices::clear_main_idx() {
  main_idx_ = 0u;
}
inline uint32_t FunctionIndices::_internal_main_idx() const {
  return main_idx_;
}
inline uint32_t FunctionIndices::main_idx() const {
  // @@protoc_insertion_point(field_get:FunctionIndices.main_idx)
  return _internal_main_idx();
}
inline void FunctionIndices::_internal_set_main_idx(uint32_t value) {
  
  main_idx_ = value;
}
inline void FunctionIndices::set_main_idx(uint32_t value) {
  _internal_set_main_idx(value);
  // @@protoc_insertion_point(field_set:FunctionIndices.main_idx)
}

// optional uint32 start_idx = 3;
inline bool FunctionIndices::_internal_has_start_idx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionIndices::has_start_idx() const {
  return _internal_has_start_idx();
}
inline void FunctionIndices::clear_start_idx() {
  start_idx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t FunctionIndices::_internal_start_idx() const {
  return start_idx_;
}
inline uint32_t FunctionIndices::start_idx() const {
  // @@protoc_insertion_point(field_get:FunctionIndices.start_idx)
  return _internal_start_idx();
}
inline void FunctionIndices::_internal_set_start_idx(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  start_idx_ = value;
}
inline void FunctionIndices::set_start_idx(uint32_t value) {
  _internal_set_start_idx(value);
  // @@protoc_insertion_point(field_set:FunctionIndices.start_idx)
}

// -------------------------------------------------------------------

// FunctionType

// uint32 param_count = 1;
inline void FunctionType::clear_param_count() {
  param_count_ = 0u;
}
inline uint32_t FunctionType::_internal_param_count() const {
  return param_count_;
}
inline uint32_t FunctionType::param_count() const {
  // @@protoc_insertion_point(field_get:FunctionType.param_count)
  return _internal_param_count();
}
inline void FunctionType::_internal_set_param_count(uint32_t value) {
  
  param_count_ = value;
}
inline void FunctionType::set_param_count(uint32_t value) {
  _internal_set_param_count(value);
  // @@protoc_insertion_point(field_set:FunctionType.param_count)
}

// repeated uint32 param_types = 2;
inline int FunctionType::_internal_param_types_size() const {
  return param_types_.size();
}
inline int FunctionType::param_types_size() const {
  return _internal_param_types_size();
}
inline void FunctionType::clear_param_types() {
  param_types_.Clear();
}
inline uint32_t FunctionType::_internal_param_types(int index) const {
  return param_types_.Get(index);
}
inline uint32_t FunctionType::param_types(int index) const {
  // @@protoc_insertion_point(field_get:FunctionType.param_types)
  return _internal_param_types(index);
}
inline void FunctionType::set_param_types(int index, uint32_t value) {
  param_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:FunctionType.param_types)
}
inline void FunctionType::_internal_add_param_types(uint32_t value) {
  param_types_.Add(value);
}
inline void FunctionType::add_param_types(uint32_t value) {
  _internal_add_param_types(value);
  // @@protoc_insertion_point(field_add:FunctionType.param_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FunctionType::_internal_param_types() const {
  return param_types_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FunctionType::param_types() const {
  // @@protoc_insertion_point(field_list:FunctionType.param_types)
  return _internal_param_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FunctionType::_internal_mutable_param_types() {
  return &param_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FunctionType::mutable_param_types() {
  // @@protoc_insertion_point(field_mutable_list:FunctionType.param_types)
  return _internal_mutable_param_types();
}

// uint32 return_count = 3;
inline void FunctionType::clear_return_count() {
  return_count_ = 0u;
}
inline uint32_t FunctionType::_internal_return_count() const {
  return return_count_;
}
inline uint32_t FunctionType::return_count() const {
  // @@protoc_insertion_point(field_get:FunctionType.return_count)
  return _internal_return_count();
}
inline void FunctionType::_internal_set_return_count(uint32_t value) {
  
  return_count_ = value;
}
inline void FunctionType::set_return_count(uint32_t value) {
  _internal_set_return_count(value);
  // @@protoc_insertion_point(field_set:FunctionType.return_count)
}

// optional uint32 return_type = 4;
inline bool FunctionType::_internal_has_return_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionType::has_return_type() const {
  return _internal_has_return_type();
}
inline void FunctionType::clear_return_type() {
  return_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t FunctionType::_internal_return_type() const {
  return return_type_;
}
inline uint32_t FunctionType::return_type() const {
  // @@protoc_insertion_point(field_get:FunctionType.return_type)
  return _internal_return_type();
}
inline void FunctionType::_internal_set_return_type(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  return_type_ = value;
}
inline void FunctionType::set_return_type(uint32_t value) {
  _internal_set_return_type(value);
  // @@protoc_insertion_point(field_set:FunctionType.return_type)
}

// -------------------------------------------------------------------

// CompilationRequest

// string module_name = 1;
inline void CompilationRequest::clear_module_name() {
  module_name_.ClearToEmpty();
}
inline const std::string& CompilationRequest::module_name() const {
  // @@protoc_insertion_point(field_get:CompilationRequest.module_name)
  return _internal_module_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompilationRequest::set_module_name(ArgT0&& arg0, ArgT... args) {
 
 module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CompilationRequest.module_name)
}
inline std::string* CompilationRequest::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:CompilationRequest.module_name)
  return _s;
}
inline const std::string& CompilationRequest::_internal_module_name() const {
  return module_name_.Get();
}
inline void CompilationRequest::_internal_set_module_name(const std::string& value) {
  
  module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CompilationRequest::_internal_mutable_module_name() {
  
  return module_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CompilationRequest::release_module_name() {
  // @@protoc_insertion_point(field_release:CompilationRequest.module_name)
  return module_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CompilationRequest::set_allocated_module_name(std::string* module_name) {
  if (module_name != nullptr) {
    
  } else {
    
  }
  module_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (module_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CompilationRequest.module_name)
}

// string architecture = 2;
inline void CompilationRequest::clear_architecture() {
  architecture_.ClearToEmpty();
}
inline const std::string& CompilationRequest::architecture() const {
  // @@protoc_insertion_point(field_get:CompilationRequest.architecture)
  return _internal_architecture();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompilationRequest::set_architecture(ArgT0&& arg0, ArgT... args) {
 
 architecture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CompilationRequest.architecture)
}
inline std::string* CompilationRequest::mutable_architecture() {
  std::string* _s = _internal_mutable_architecture();
  // @@protoc_insertion_point(field_mutable:CompilationRequest.architecture)
  return _s;
}
inline const std::string& CompilationRequest::_internal_architecture() const {
  return architecture_.Get();
}
inline void CompilationRequest::_internal_set_architecture(const std::string& value) {
  
  architecture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CompilationRequest::_internal_mutable_architecture() {
  
  return architecture_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CompilationRequest::release_architecture() {
  // @@protoc_insertion_point(field_release:CompilationRequest.architecture)
  return architecture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CompilationRequest::set_allocated_architecture(std::string* architecture) {
  if (architecture != nullptr) {
    
  } else {
    
  }
  architecture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), architecture,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (architecture_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    architecture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CompilationRequest.architecture)
}

// uint32 func_idx = 3;
inline void CompilationRequest::clear_func_idx() {
  func_idx_ = 0u;
}
inline uint32_t CompilationRequest::_internal_func_idx() const {
  return func_idx_;
}
inline uint32_t CompilationRequest::func_idx() const {
  // @@protoc_insertion_point(field_get:CompilationRequest.func_idx)
  return _internal_func_idx();
}
inline void CompilationRequest::_internal_set_func_idx(uint32_t value) {
  
  func_idx_ = value;
}
inline void CompilationRequest::set_func_idx(uint32_t value) {
  _internal_set_func_idx(value);
  // @@protoc_insertion_point(field_set:CompilationRequest.func_idx)
}

// string target_data_layout = 4;
inline void CompilationRequest::clear_target_data_layout() {
  target_data_layout_.ClearToEmpty();
}
inline const std::string& CompilationRequest::target_data_layout() const {
  // @@protoc_insertion_point(field_get:CompilationRequest.target_data_layout)
  return _internal_target_data_layout();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompilationRequest::set_target_data_layout(ArgT0&& arg0, ArgT... args) {
 
 target_data_layout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CompilationRequest.target_data_layout)
}
inline std::string* CompilationRequest::mutable_target_data_layout() {
  std::string* _s = _internal_mutable_target_data_layout();
  // @@protoc_insertion_point(field_mutable:CompilationRequest.target_data_layout)
  return _s;
}
inline const std::string& CompilationRequest::_internal_target_data_layout() const {
  return target_data_layout_.Get();
}
inline void CompilationRequest::_internal_set_target_data_layout(const std::string& value) {
  
  target_data_layout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CompilationRequest::_internal_mutable_target_data_layout() {
  
  return target_data_layout_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CompilationRequest::release_target_data_layout() {
  // @@protoc_insertion_point(field_release:CompilationRequest.target_data_layout)
  return target_data_layout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CompilationRequest::set_allocated_target_data_layout(std::string* target_data_layout) {
  if (target_data_layout != nullptr) {
    
  } else {
    
  }
  target_data_layout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_data_layout,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_data_layout_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    target_data_layout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CompilationRequest.target_data_layout)
}

// uint32 program_pointer_size = 5;
inline void CompilationRequest::clear_program_pointer_size() {
  program_pointer_size_ = 0u;
}
inline uint32_t CompilationRequest::_internal_program_pointer_size() const {
  return program_pointer_size_;
}
inline uint32_t CompilationRequest::program_pointer_size() const {
  // @@protoc_insertion_point(field_get:CompilationRequest.program_pointer_size)
  return _internal_program_pointer_size();
}
inline void CompilationRequest::_internal_set_program_pointer_size(uint32_t value) {
  
  program_pointer_size_ = value;
}
inline void CompilationRequest::set_program_pointer_size(uint32_t value) {
  _internal_set_program_pointer_size(value);
  // @@protoc_insertion_point(field_set:CompilationRequest.program_pointer_size)
}

// -------------------------------------------------------------------

// CodeRequest

// string module_name = 1;
inline void CodeRequest::clear_module_name() {
  module_name_.ClearToEmpty();
}
inline const std::string& CodeRequest::module_name() const {
  // @@protoc_insertion_point(field_get:CodeRequest.module_name)
  return _internal_module_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CodeRequest::set_module_name(ArgT0&& arg0, ArgT... args) {
 
 module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CodeRequest.module_name)
}
inline std::string* CodeRequest::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:CodeRequest.module_name)
  return _s;
}
inline const std::string& CodeRequest::_internal_module_name() const {
  return module_name_.Get();
}
inline void CodeRequest::_internal_set_module_name(const std::string& value) {
  
  module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CodeRequest::_internal_mutable_module_name() {
  
  return module_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CodeRequest::release_module_name() {
  // @@protoc_insertion_point(field_release:CodeRequest.module_name)
  return module_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CodeRequest::set_allocated_module_name(std::string* module_name) {
  if (module_name != nullptr) {
    
  } else {
    
  }
  module_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (module_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CodeRequest.module_name)
}

// uint32 func_idx = 2;
inline void CodeRequest::clear_func_idx() {
  func_idx_ = 0u;
}
inline uint32_t CodeRequest::_internal_func_idx() const {
  return func_idx_;
}
inline uint32_t CodeRequest::func_idx() const {
  // @@protoc_insertion_point(field_get:CodeRequest.func_idx)
  return _internal_func_idx();
}
inline void CodeRequest::_internal_set_func_idx(uint32_t value) {
  
  func_idx_ = value;
}
inline void CodeRequest::set_func_idx(uint32_t value) {
  _internal_set_func_idx(value);
  // @@protoc_insertion_point(field_set:CodeRequest.func_idx)
}

// -------------------------------------------------------------------

// WasmFunction

// bool is_imported = 1;
inline void WasmFunction::clear_is_imported() {
  is_imported_ = false;
}
inline bool WasmFunction::_internal_is_imported() const {
  return is_imported_;
}
inline bool WasmFunction::is_imported() const {
  // @@protoc_insertion_point(field_get:WasmFunction.is_imported)
  return _internal_is_imported();
}
inline void WasmFunction::_internal_set_is_imported(bool value) {
  
  is_imported_ = value;
}
inline void WasmFunction::set_is_imported(bool value) {
  _internal_set_is_imported(value);
  // @@protoc_insertion_point(field_set:WasmFunction.is_imported)
}

// .FunctionType func_type = 2;
inline bool WasmFunction::_internal_has_func_type() const {
  return this != internal_default_instance() && func_type_ != nullptr;
}
inline bool WasmFunction::has_func_type() const {
  return _internal_has_func_type();
}
inline void WasmFunction::clear_func_type() {
  if (GetArenaForAllocation() == nullptr && func_type_ != nullptr) {
    delete func_type_;
  }
  func_type_ = nullptr;
}
inline const ::FunctionType& WasmFunction::_internal_func_type() const {
  const ::FunctionType* p = func_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::FunctionType&>(
      ::_FunctionType_default_instance_);
}
inline const ::FunctionType& WasmFunction::func_type() const {
  // @@protoc_insertion_point(field_get:WasmFunction.func_type)
  return _internal_func_type();
}
inline void WasmFunction::unsafe_arena_set_allocated_func_type(
    ::FunctionType* func_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(func_type_);
  }
  func_type_ = func_type;
  if (func_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WasmFunction.func_type)
}
inline ::FunctionType* WasmFunction::release_func_type() {
  
  ::FunctionType* temp = func_type_;
  func_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FunctionType* WasmFunction::unsafe_arena_release_func_type() {
  // @@protoc_insertion_point(field_release:WasmFunction.func_type)
  
  ::FunctionType* temp = func_type_;
  func_type_ = nullptr;
  return temp;
}
inline ::FunctionType* WasmFunction::_internal_mutable_func_type() {
  
  if (func_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::FunctionType>(GetArenaForAllocation());
    func_type_ = p;
  }
  return func_type_;
}
inline ::FunctionType* WasmFunction::mutable_func_type() {
  ::FunctionType* _msg = _internal_mutable_func_type();
  // @@protoc_insertion_point(field_mutable:WasmFunction.func_type)
  return _msg;
}
inline void WasmFunction::set_allocated_func_type(::FunctionType* func_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete func_type_;
  }
  if (func_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FunctionType>::GetOwningArena(func_type);
    if (message_arena != submessage_arena) {
      func_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, func_type, submessage_arena);
    }
    
  } else {
    
  }
  func_type_ = func_type;
  // @@protoc_insertion_point(field_set_allocated:WasmFunction.func_type)
}

// bytes func_body = 3;
inline void WasmFunction::clear_func_body() {
  func_body_.ClearToEmpty();
}
inline const std::string& WasmFunction::func_body() const {
  // @@protoc_insertion_point(field_get:WasmFunction.func_body)
  return _internal_func_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WasmFunction::set_func_body(ArgT0&& arg0, ArgT... args) {
 
 func_body_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WasmFunction.func_body)
}
inline std::string* WasmFunction::mutable_func_body() {
  std::string* _s = _internal_mutable_func_body();
  // @@protoc_insertion_point(field_mutable:WasmFunction.func_body)
  return _s;
}
inline const std::string& WasmFunction::_internal_func_body() const {
  return func_body_.Get();
}
inline void WasmFunction::_internal_set_func_body(const std::string& value) {
  
  func_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WasmFunction::_internal_mutable_func_body() {
  
  return func_body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WasmFunction::release_func_body() {
  // @@protoc_insertion_point(field_release:WasmFunction.func_body)
  return func_body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WasmFunction::set_allocated_func_body(std::string* func_body) {
  if (func_body != nullptr) {
    
  } else {
    
  }
  func_body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), func_body,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (func_body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    func_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WasmFunction.func_body)
}

// -------------------------------------------------------------------

// NativeBinary

// bytes data_bytes = 1;
inline void NativeBinary::clear_data_bytes() {
  data_bytes_.ClearToEmpty();
}
inline const std::string& NativeBinary::data_bytes() const {
  // @@protoc_insertion_point(field_get:NativeBinary.data_bytes)
  return _internal_data_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NativeBinary::set_data_bytes(ArgT0&& arg0, ArgT... args) {
 
 data_bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NativeBinary.data_bytes)
}
inline std::string* NativeBinary::mutable_data_bytes() {
  std::string* _s = _internal_mutable_data_bytes();
  // @@protoc_insertion_point(field_mutable:NativeBinary.data_bytes)
  return _s;
}
inline const std::string& NativeBinary::_internal_data_bytes() const {
  return data_bytes_.Get();
}
inline void NativeBinary::_internal_set_data_bytes(const std::string& value) {
  
  data_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NativeBinary::_internal_mutable_data_bytes() {
  
  return data_bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NativeBinary::release_data_bytes() {
  // @@protoc_insertion_point(field_release:NativeBinary.data_bytes)
  return data_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NativeBinary::set_allocated_data_bytes(std::string* data_bytes) {
  if (data_bytes != nullptr) {
    
  } else {
    
  }
  data_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_bytes,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_bytes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NativeBinary.data_bytes)
}

// uint32 data_length = 2;
inline void NativeBinary::clear_data_length() {
  data_length_ = 0u;
}
inline uint32_t NativeBinary::_internal_data_length() const {
  return data_length_;
}
inline uint32_t NativeBinary::data_length() const {
  // @@protoc_insertion_point(field_get:NativeBinary.data_length)
  return _internal_data_length();
}
inline void NativeBinary::_internal_set_data_length(uint32_t value) {
  
  data_length_ = value;
}
inline void NativeBinary::set_data_length(uint32_t value) {
  _internal_set_data_length(value);
  // @@protoc_insertion_point(field_set:NativeBinary.data_length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_jitaas_2eproto
