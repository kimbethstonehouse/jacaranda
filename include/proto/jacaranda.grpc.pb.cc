// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: jacaranda.proto

#include "jacaranda.pb.h"
#include "jacaranda.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* CompilerService_method_names[] = {
  "/CompilerService/request_compile",
};

std::unique_ptr< CompilerService::Stub> CompilerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CompilerService::Stub> stub(new CompilerService::Stub(channel, options));
  return stub;
}

CompilerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_request_compile_(CompilerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CompilerService::Stub::request_compile(::grpc::ClientContext* context, const ::CompilationRequest& request, ::NativeBinary* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CompilationRequest, ::NativeBinary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_request_compile_, context, request, response);
}

void CompilerService::Stub::async::request_compile(::grpc::ClientContext* context, const ::CompilationRequest* request, ::NativeBinary* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CompilationRequest, ::NativeBinary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_request_compile_, context, request, response, std::move(f));
}

void CompilerService::Stub::async::request_compile(::grpc::ClientContext* context, const ::CompilationRequest* request, ::NativeBinary* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_request_compile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NativeBinary>* CompilerService::Stub::PrepareAsyncrequest_compileRaw(::grpc::ClientContext* context, const ::CompilationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NativeBinary, ::CompilationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_request_compile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NativeBinary>* CompilerService::Stub::Asyncrequest_compileRaw(::grpc::ClientContext* context, const ::CompilationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrequest_compileRaw(context, request, cq);
  result->StartCall();
  return result;
}

CompilerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompilerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompilerService::Service, ::CompilationRequest, ::NativeBinary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CompilerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CompilationRequest* req,
             ::NativeBinary* resp) {
               return service->request_compile(ctx, req, resp);
             }, this)));
}

CompilerService::Service::~Service() {
}

::grpc::Status CompilerService::Service::request_compile(::grpc::ServerContext* context, const ::CompilationRequest* request, ::NativeBinary* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RepositoryService_method_names[] = {
  "/RepositoryService/request_code",
  "/RepositoryService/request_function_indices",
};

std::unique_ptr< RepositoryService::Stub> RepositoryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RepositoryService::Stub> stub(new RepositoryService::Stub(channel, options));
  return stub;
}

RepositoryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_request_code_(RepositoryService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_request_function_indices_(RepositoryService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RepositoryService::Stub::request_code(::grpc::ClientContext* context, const ::CodeRequest& request, ::WasmFunction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CodeRequest, ::WasmFunction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_request_code_, context, request, response);
}

void RepositoryService::Stub::async::request_code(::grpc::ClientContext* context, const ::CodeRequest* request, ::WasmFunction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CodeRequest, ::WasmFunction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_request_code_, context, request, response, std::move(f));
}

void RepositoryService::Stub::async::request_code(::grpc::ClientContext* context, const ::CodeRequest* request, ::WasmFunction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_request_code_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::WasmFunction>* RepositoryService::Stub::PrepareAsyncrequest_codeRaw(::grpc::ClientContext* context, const ::CodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::WasmFunction, ::CodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_request_code_, context, request);
}

::grpc::ClientAsyncResponseReader< ::WasmFunction>* RepositoryService::Stub::Asyncrequest_codeRaw(::grpc::ClientContext* context, const ::CodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrequest_codeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RepositoryService::Stub::request_function_indices(::grpc::ClientContext* context, const ::IndicesRequest& request, ::FunctionIndices* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndicesRequest, ::FunctionIndices, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_request_function_indices_, context, request, response);
}

void RepositoryService::Stub::async::request_function_indices(::grpc::ClientContext* context, const ::IndicesRequest* request, ::FunctionIndices* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndicesRequest, ::FunctionIndices, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_request_function_indices_, context, request, response, std::move(f));
}

void RepositoryService::Stub::async::request_function_indices(::grpc::ClientContext* context, const ::IndicesRequest* request, ::FunctionIndices* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_request_function_indices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FunctionIndices>* RepositoryService::Stub::PrepareAsyncrequest_function_indicesRaw(::grpc::ClientContext* context, const ::IndicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FunctionIndices, ::IndicesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_request_function_indices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FunctionIndices>* RepositoryService::Stub::Asyncrequest_function_indicesRaw(::grpc::ClientContext* context, const ::IndicesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrequest_function_indicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

RepositoryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RepositoryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RepositoryService::Service, ::CodeRequest, ::WasmFunction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RepositoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CodeRequest* req,
             ::WasmFunction* resp) {
               return service->request_code(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RepositoryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RepositoryService::Service, ::IndicesRequest, ::FunctionIndices, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RepositoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndicesRequest* req,
             ::FunctionIndices* resp) {
               return service->request_function_indices(ctx, req, resp);
             }, this)));
}

RepositoryService::Service::~Service() {
}

::grpc::Status RepositoryService::Service::request_code(::grpc::ServerContext* context, const ::CodeRequest* request, ::WasmFunction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RepositoryService::Service::request_function_indices(::grpc::ServerContext* context, const ::IndicesRequest* request, ::FunctionIndices* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


