// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jacaranda.proto

#include "jacaranda.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr IndicesRequest::IndicesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : module_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IndicesRequestDefaultTypeInternal {
  constexpr IndicesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndicesRequestDefaultTypeInternal() {}
  union {
    IndicesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndicesRequestDefaultTypeInternal _IndicesRequest_default_instance_;
constexpr FunctionIndices::FunctionIndices(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : func_count_(0u)
  , main_idx_(0u)
  , start_idx_(0u){}
struct FunctionIndicesDefaultTypeInternal {
  constexpr FunctionIndicesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionIndicesDefaultTypeInternal() {}
  union {
    FunctionIndices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionIndicesDefaultTypeInternal _FunctionIndices_default_instance_;
constexpr FunctionType::FunctionType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : param_types_()
  , _param_types_cached_byte_size_(0)
  , param_count_(0u)
  , return_count_(0u)
  , return_type_(0u){}
struct FunctionTypeDefaultTypeInternal {
  constexpr FunctionTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionTypeDefaultTypeInternal() {}
  union {
    FunctionType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionTypeDefaultTypeInternal _FunctionType_default_instance_;
constexpr CompilationRequest::CompilationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : module_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , architecture_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_data_layout_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , func_idx_(0u)
  , program_pointer_size_(0u){}
struct CompilationRequestDefaultTypeInternal {
  constexpr CompilationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompilationRequestDefaultTypeInternal() {}
  union {
    CompilationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompilationRequestDefaultTypeInternal _CompilationRequest_default_instance_;
constexpr CodeRequest::CodeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : module_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , func_idx_(0u){}
struct CodeRequestDefaultTypeInternal {
  constexpr CodeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CodeRequestDefaultTypeInternal() {}
  union {
    CodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CodeRequestDefaultTypeInternal _CodeRequest_default_instance_;
constexpr WasmFunction::WasmFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : func_body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , func_type_(nullptr)
  , is_imported_(false)
  , body_length_(0u){}
struct WasmFunctionDefaultTypeInternal {
  constexpr WasmFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WasmFunctionDefaultTypeInternal() {}
  union {
    WasmFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WasmFunctionDefaultTypeInternal _WasmFunction_default_instance_;
constexpr NativeBinary::NativeBinary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_length_(0u){}
struct NativeBinaryDefaultTypeInternal {
  constexpr NativeBinaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NativeBinaryDefaultTypeInternal() {}
  union {
    NativeBinary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NativeBinaryDefaultTypeInternal _NativeBinary_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_jacaranda_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_jacaranda_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_jacaranda_2eproto = nullptr;

const uint32_t TableStruct_jacaranda_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IndicesRequest, module_name_),
  PROTOBUF_FIELD_OFFSET(::FunctionIndices, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FunctionIndices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FunctionIndices, func_count_),
  PROTOBUF_FIELD_OFFSET(::FunctionIndices, main_idx_),
  PROTOBUF_FIELD_OFFSET(::FunctionIndices, start_idx_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::FunctionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FunctionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FunctionType, param_count_),
  PROTOBUF_FIELD_OFFSET(::FunctionType, param_types_),
  PROTOBUF_FIELD_OFFSET(::FunctionType, return_count_),
  PROTOBUF_FIELD_OFFSET(::FunctionType, return_type_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CompilationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CompilationRequest, module_name_),
  PROTOBUF_FIELD_OFFSET(::CompilationRequest, architecture_),
  PROTOBUF_FIELD_OFFSET(::CompilationRequest, func_idx_),
  PROTOBUF_FIELD_OFFSET(::CompilationRequest, target_data_layout_),
  PROTOBUF_FIELD_OFFSET(::CompilationRequest, program_pointer_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CodeRequest, module_name_),
  PROTOBUF_FIELD_OFFSET(::CodeRequest, func_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WasmFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WasmFunction, is_imported_),
  PROTOBUF_FIELD_OFFSET(::WasmFunction, func_body_),
  PROTOBUF_FIELD_OFFSET(::WasmFunction, body_length_),
  PROTOBUF_FIELD_OFFSET(::WasmFunction, func_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NativeBinary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NativeBinary, data_bytes_),
  PROTOBUF_FIELD_OFFSET(::NativeBinary, data_length_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::IndicesRequest)},
  { 7, 16, -1, sizeof(::FunctionIndices)},
  { 19, 29, -1, sizeof(::FunctionType)},
  { 33, -1, -1, sizeof(::CompilationRequest)},
  { 44, -1, -1, sizeof(::CodeRequest)},
  { 52, -1, -1, sizeof(::WasmFunction)},
  { 62, -1, -1, sizeof(::NativeBinary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IndicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FunctionIndices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FunctionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CompilationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WasmFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NativeBinary_default_instance_),
};

const char descriptor_table_protodef_jacaranda_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017jacaranda.proto\"%\n\016IndicesRequest\022\023\n\013m"
  "odule_name\030\001 \001(\t\"]\n\017FunctionIndices\022\022\n\nf"
  "unc_count\030\001 \001(\r\022\020\n\010main_idx\030\002 \001(\r\022\026\n\tsta"
  "rt_idx\030\003 \001(\rH\000\210\001\001B\014\n\n_start_idx\"x\n\014Funct"
  "ionType\022\023\n\013param_count\030\001 \001(\r\022\023\n\013param_ty"
  "pes\030\002 \003(\r\022\024\n\014return_count\030\003 \001(\r\022\030\n\013retur"
  "n_type\030\004 \001(\rH\000\210\001\001B\016\n\014_return_type\"\213\001\n\022Co"
  "mpilationRequest\022\023\n\013module_name\030\001 \001(\t\022\024\n"
  "\014architecture\030\002 \001(\t\022\020\n\010func_idx\030\003 \001(\r\022\032\n"
  "\022target_data_layout\030\004 \001(\t\022\034\n\024program_poi"
  "nter_size\030\005 \001(\r\"4\n\013CodeRequest\022\023\n\013module"
  "_name\030\001 \001(\t\022\020\n\010func_idx\030\002 \001(\r\"m\n\014WasmFun"
  "ction\022\023\n\013is_imported\030\001 \001(\010\022\021\n\tfunc_body\030"
  "\002 \001(\014\022\023\n\013body_length\030\003 \001(\r\022 \n\tfunc_type\030"
  "\004 \001(\0132\r.FunctionType\"7\n\014NativeBinary\022\022\n\n"
  "data_bytes\030\001 \001(\014\022\023\n\013data_length\030\002 \001(\r2J\n"
  "\017CompilerService\0227\n\017request_compile\022\023.Co"
  "mpilationRequest\032\r.NativeBinary\"\0002\203\001\n\021Re"
  "positoryService\022-\n\014request_code\022\014.CodeRe"
  "quest\032\r.WasmFunction\"\000\022\?\n\030request_functi"
  "on_indices\022\017.IndicesRequest\032\020.FunctionIn"
  "dices\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_jacaranda_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jacaranda_2eproto = {
  false, false, 855, descriptor_table_protodef_jacaranda_2eproto, "jacaranda.proto", 
  &descriptor_table_jacaranda_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_jacaranda_2eproto::offsets,
  file_level_metadata_jacaranda_2eproto, file_level_enum_descriptors_jacaranda_2eproto, file_level_service_descriptors_jacaranda_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_jacaranda_2eproto_getter() {
  return &descriptor_table_jacaranda_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_jacaranda_2eproto(&descriptor_table_jacaranda_2eproto);

// ===================================================================

class IndicesRequest::_Internal {
 public:
};

IndicesRequest::IndicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IndicesRequest)
}
IndicesRequest::IndicesRequest(const IndicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_name().empty()) {
    module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IndicesRequest)
}

inline void IndicesRequest::SharedCtor() {
module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndicesRequest::~IndicesRequest() {
  // @@protoc_insertion_point(destructor:IndicesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IndicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  module_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IndicesRequest::ArenaDtor(void* object) {
  IndicesRequest* _this = reinterpret_cast< IndicesRequest* >(object);
  (void)_this;
}
void IndicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IndicesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string module_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_module_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IndicesRequest.module_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndicesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndicesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_name = 1;
  if (!this->_internal_module_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_name().data(), static_cast<int>(this->_internal_module_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndicesRequest.module_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_module_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndicesRequest)
  return target;
}

size_t IndicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndicesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string module_name = 1;
  if (!this->_internal_module_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndicesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IndicesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndicesRequest::GetClassData() const { return &_class_data_; }

void IndicesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IndicesRequest *>(to)->MergeFrom(
      static_cast<const IndicesRequest &>(from));
}


void IndicesRequest::MergeFrom(const IndicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_module_name().empty()) {
    _internal_set_module_name(from._internal_module_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndicesRequest::CopyFrom(const IndicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndicesRequest::IsInitialized() const {
  return true;
}

void IndicesRequest::InternalSwap(IndicesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_name_, lhs_arena,
      &other->module_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IndicesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_jacaranda_2eproto_getter, &descriptor_table_jacaranda_2eproto_once,
      file_level_metadata_jacaranda_2eproto[0]);
}

// ===================================================================

class FunctionIndices::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionIndices>()._has_bits_);
  static void set_has_start_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FunctionIndices::FunctionIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FunctionIndices)
}
FunctionIndices::FunctionIndices(const FunctionIndices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&func_count_, &from.func_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_idx_) -
    reinterpret_cast<char*>(&func_count_)) + sizeof(start_idx_));
  // @@protoc_insertion_point(copy_constructor:FunctionIndices)
}

inline void FunctionIndices::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&func_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_idx_) -
    reinterpret_cast<char*>(&func_count_)) + sizeof(start_idx_));
}

FunctionIndices::~FunctionIndices() {
  // @@protoc_insertion_point(destructor:FunctionIndices)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionIndices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionIndices::ArenaDtor(void* object) {
  FunctionIndices* _this = reinterpret_cast< FunctionIndices* >(object);
  (void)_this;
}
void FunctionIndices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionIndices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionIndices::Clear() {
// @@protoc_insertion_point(message_clear_start:FunctionIndices)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&func_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&main_idx_) -
      reinterpret_cast<char*>(&func_count_)) + sizeof(main_idx_));
  start_idx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionIndices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 func_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          func_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 main_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          main_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_start_idx(&has_bits);
          start_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionIndices::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FunctionIndices)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 func_count = 1;
  if (this->_internal_func_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_func_count(), target);
  }

  // uint32 main_idx = 2;
  if (this->_internal_main_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_main_idx(), target);
  }

  // optional uint32 start_idx = 3;
  if (_internal_has_start_idx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FunctionIndices)
  return target;
}

size_t FunctionIndices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FunctionIndices)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 func_count = 1;
  if (this->_internal_func_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_func_count());
  }

  // uint32 main_idx = 2;
  if (this->_internal_main_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_main_idx());
  }

  // optional uint32 start_idx = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionIndices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionIndices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionIndices::GetClassData() const { return &_class_data_; }

void FunctionIndices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionIndices *>(to)->MergeFrom(
      static_cast<const FunctionIndices &>(from));
}


void FunctionIndices::MergeFrom(const FunctionIndices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FunctionIndices)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_func_count() != 0) {
    _internal_set_func_count(from._internal_func_count());
  }
  if (from._internal_main_idx() != 0) {
    _internal_set_main_idx(from._internal_main_idx());
  }
  if (from._internal_has_start_idx()) {
    _internal_set_start_idx(from._internal_start_idx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionIndices::CopyFrom(const FunctionIndices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FunctionIndices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionIndices::IsInitialized() const {
  return true;
}

void FunctionIndices::InternalSwap(FunctionIndices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionIndices, start_idx_)
      + sizeof(FunctionIndices::start_idx_)
      - PROTOBUF_FIELD_OFFSET(FunctionIndices, func_count_)>(
          reinterpret_cast<char*>(&func_count_),
          reinterpret_cast<char*>(&other->func_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionIndices::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_jacaranda_2eproto_getter, &descriptor_table_jacaranda_2eproto_once,
      file_level_metadata_jacaranda_2eproto[1]);
}

// ===================================================================

class FunctionType::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionType>()._has_bits_);
  static void set_has_return_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FunctionType::FunctionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  param_types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FunctionType)
}
FunctionType::FunctionType(const FunctionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      param_types_(from.param_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&param_count_, &from.param_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_type_) -
    reinterpret_cast<char*>(&param_count_)) + sizeof(return_type_));
  // @@protoc_insertion_point(copy_constructor:FunctionType)
}

inline void FunctionType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&param_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&return_type_) -
    reinterpret_cast<char*>(&param_count_)) + sizeof(return_type_));
}

FunctionType::~FunctionType() {
  // @@protoc_insertion_point(destructor:FunctionType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionType::ArenaDtor(void* object) {
  FunctionType* _this = reinterpret_cast< FunctionType* >(object);
  (void)_this;
}
void FunctionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionType::Clear() {
// @@protoc_insertion_point(message_clear_start:FunctionType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_types_.Clear();
  ::memset(&param_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_count_) -
      reinterpret_cast<char*>(&param_count_)) + sizeof(return_count_));
  return_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 param_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          param_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 param_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_param_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_param_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 return_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          return_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 return_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_return_type(&has_bits);
          return_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FunctionType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 param_count = 1;
  if (this->_internal_param_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_param_count(), target);
  }

  // repeated uint32 param_types = 2;
  {
    int byte_size = _param_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_param_types(), byte_size, target);
    }
  }

  // uint32 return_count = 3;
  if (this->_internal_return_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_return_count(), target);
  }

  // optional uint32 return_type = 4;
  if (_internal_has_return_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_return_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FunctionType)
  return target;
}

size_t FunctionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FunctionType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 param_types = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->param_types_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _param_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 param_count = 1;
  if (this->_internal_param_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_param_count());
  }

  // uint32 return_count = 3;
  if (this->_internal_return_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_return_count());
  }

  // optional uint32 return_type = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_return_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionType::GetClassData() const { return &_class_data_; }

void FunctionType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionType *>(to)->MergeFrom(
      static_cast<const FunctionType &>(from));
}


void FunctionType::MergeFrom(const FunctionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FunctionType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  param_types_.MergeFrom(from.param_types_);
  if (from._internal_param_count() != 0) {
    _internal_set_param_count(from._internal_param_count());
  }
  if (from._internal_return_count() != 0) {
    _internal_set_return_count(from._internal_return_count());
  }
  if (from._internal_has_return_type()) {
    _internal_set_return_type(from._internal_return_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionType::CopyFrom(const FunctionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FunctionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionType::IsInitialized() const {
  return true;
}

void FunctionType::InternalSwap(FunctionType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  param_types_.InternalSwap(&other->param_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionType, return_type_)
      + sizeof(FunctionType::return_type_)
      - PROTOBUF_FIELD_OFFSET(FunctionType, param_count_)>(
          reinterpret_cast<char*>(&param_count_),
          reinterpret_cast<char*>(&other->param_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_jacaranda_2eproto_getter, &descriptor_table_jacaranda_2eproto_once,
      file_level_metadata_jacaranda_2eproto[2]);
}

// ===================================================================

class CompilationRequest::_Internal {
 public:
};

CompilationRequest::CompilationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CompilationRequest)
}
CompilationRequest::CompilationRequest(const CompilationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_name().empty()) {
    module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_name(), 
      GetArenaForAllocation());
  }
  architecture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    architecture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_architecture().empty()) {
    architecture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_architecture(), 
      GetArenaForAllocation());
  }
  target_data_layout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_data_layout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_data_layout().empty()) {
    target_data_layout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_data_layout(), 
      GetArenaForAllocation());
  }
  ::memcpy(&func_idx_, &from.func_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&program_pointer_size_) -
    reinterpret_cast<char*>(&func_idx_)) + sizeof(program_pointer_size_));
  // @@protoc_insertion_point(copy_constructor:CompilationRequest)
}

inline void CompilationRequest::SharedCtor() {
module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
architecture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  architecture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
target_data_layout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_data_layout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&func_idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&program_pointer_size_) -
    reinterpret_cast<char*>(&func_idx_)) + sizeof(program_pointer_size_));
}

CompilationRequest::~CompilationRequest() {
  // @@protoc_insertion_point(destructor:CompilationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompilationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  module_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  architecture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_data_layout_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompilationRequest::ArenaDtor(void* object) {
  CompilationRequest* _this = reinterpret_cast< CompilationRequest* >(object);
  (void)_this;
}
void CompilationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompilationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompilationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CompilationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_name_.ClearToEmpty();
  architecture_.ClearToEmpty();
  target_data_layout_.ClearToEmpty();
  ::memset(&func_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&program_pointer_size_) -
      reinterpret_cast<char*>(&func_idx_)) + sizeof(program_pointer_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompilationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string module_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_module_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CompilationRequest.module_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string architecture = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_architecture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CompilationRequest.architecture"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 func_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          func_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target_data_layout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_target_data_layout();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CompilationRequest.target_data_layout"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 program_pointer_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          program_pointer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompilationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CompilationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_name = 1;
  if (!this->_internal_module_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_name().data(), static_cast<int>(this->_internal_module_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CompilationRequest.module_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_module_name(), target);
  }

  // string architecture = 2;
  if (!this->_internal_architecture().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_architecture().data(), static_cast<int>(this->_internal_architecture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CompilationRequest.architecture");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_architecture(), target);
  }

  // uint32 func_idx = 3;
  if (this->_internal_func_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_func_idx(), target);
  }

  // string target_data_layout = 4;
  if (!this->_internal_target_data_layout().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_data_layout().data(), static_cast<int>(this->_internal_target_data_layout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CompilationRequest.target_data_layout");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target_data_layout(), target);
  }

  // uint32 program_pointer_size = 5;
  if (this->_internal_program_pointer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_program_pointer_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CompilationRequest)
  return target;
}

size_t CompilationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CompilationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string module_name = 1;
  if (!this->_internal_module_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_name());
  }

  // string architecture = 2;
  if (!this->_internal_architecture().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_architecture());
  }

  // string target_data_layout = 4;
  if (!this->_internal_target_data_layout().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_data_layout());
  }

  // uint32 func_idx = 3;
  if (this->_internal_func_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_func_idx());
  }

  // uint32 program_pointer_size = 5;
  if (this->_internal_program_pointer_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_program_pointer_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompilationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompilationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompilationRequest::GetClassData() const { return &_class_data_; }

void CompilationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CompilationRequest *>(to)->MergeFrom(
      static_cast<const CompilationRequest &>(from));
}


void CompilationRequest::MergeFrom(const CompilationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CompilationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_module_name().empty()) {
    _internal_set_module_name(from._internal_module_name());
  }
  if (!from._internal_architecture().empty()) {
    _internal_set_architecture(from._internal_architecture());
  }
  if (!from._internal_target_data_layout().empty()) {
    _internal_set_target_data_layout(from._internal_target_data_layout());
  }
  if (from._internal_func_idx() != 0) {
    _internal_set_func_idx(from._internal_func_idx());
  }
  if (from._internal_program_pointer_size() != 0) {
    _internal_set_program_pointer_size(from._internal_program_pointer_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompilationRequest::CopyFrom(const CompilationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CompilationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompilationRequest::IsInitialized() const {
  return true;
}

void CompilationRequest::InternalSwap(CompilationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_name_, lhs_arena,
      &other->module_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &architecture_, lhs_arena,
      &other->architecture_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_data_layout_, lhs_arena,
      &other->target_data_layout_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompilationRequest, program_pointer_size_)
      + sizeof(CompilationRequest::program_pointer_size_)
      - PROTOBUF_FIELD_OFFSET(CompilationRequest, func_idx_)>(
          reinterpret_cast<char*>(&func_idx_),
          reinterpret_cast<char*>(&other->func_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompilationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_jacaranda_2eproto_getter, &descriptor_table_jacaranda_2eproto_once,
      file_level_metadata_jacaranda_2eproto[3]);
}

// ===================================================================

class CodeRequest::_Internal {
 public:
};

CodeRequest::CodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CodeRequest)
}
CodeRequest::CodeRequest(const CodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_name().empty()) {
    module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_name(), 
      GetArenaForAllocation());
  }
  func_idx_ = from.func_idx_;
  // @@protoc_insertion_point(copy_constructor:CodeRequest)
}

inline void CodeRequest::SharedCtor() {
module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
func_idx_ = 0u;
}

CodeRequest::~CodeRequest() {
  // @@protoc_insertion_point(destructor:CodeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  module_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CodeRequest::ArenaDtor(void* object) {
  CodeRequest* _this = reinterpret_cast< CodeRequest* >(object);
  (void)_this;
}
void CodeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_name_.ClearToEmpty();
  func_idx_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string module_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_module_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CodeRequest.module_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 func_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          func_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_name = 1;
  if (!this->_internal_module_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_name().data(), static_cast<int>(this->_internal_module_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CodeRequest.module_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_module_name(), target);
  }

  // uint32 func_idx = 2;
  if (this->_internal_func_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_func_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CodeRequest)
  return target;
}

size_t CodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string module_name = 1;
  if (!this->_internal_module_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_name());
  }

  // uint32 func_idx = 2;
  if (this->_internal_func_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_func_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CodeRequest::GetClassData() const { return &_class_data_; }

void CodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CodeRequest *>(to)->MergeFrom(
      static_cast<const CodeRequest &>(from));
}


void CodeRequest::MergeFrom(const CodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_module_name().empty()) {
    _internal_set_module_name(from._internal_module_name());
  }
  if (from._internal_func_idx() != 0) {
    _internal_set_func_idx(from._internal_func_idx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CodeRequest::CopyFrom(const CodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeRequest::IsInitialized() const {
  return true;
}

void CodeRequest::InternalSwap(CodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_name_, lhs_arena,
      &other->module_name_, rhs_arena
  );
  swap(func_idx_, other->func_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CodeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_jacaranda_2eproto_getter, &descriptor_table_jacaranda_2eproto_once,
      file_level_metadata_jacaranda_2eproto[4]);
}

// ===================================================================

class WasmFunction::_Internal {
 public:
  static const ::FunctionType& func_type(const WasmFunction* msg);
};

const ::FunctionType&
WasmFunction::_Internal::func_type(const WasmFunction* msg) {
  return *msg->func_type_;
}
WasmFunction::WasmFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WasmFunction)
}
WasmFunction::WasmFunction(const WasmFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  func_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    func_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_func_body().empty()) {
    func_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_func_body(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_func_type()) {
    func_type_ = new ::FunctionType(*from.func_type_);
  } else {
    func_type_ = nullptr;
  }
  ::memcpy(&is_imported_, &from.is_imported_,
    static_cast<size_t>(reinterpret_cast<char*>(&body_length_) -
    reinterpret_cast<char*>(&is_imported_)) + sizeof(body_length_));
  // @@protoc_insertion_point(copy_constructor:WasmFunction)
}

inline void WasmFunction::SharedCtor() {
func_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  func_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&func_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_length_) -
    reinterpret_cast<char*>(&func_type_)) + sizeof(body_length_));
}

WasmFunction::~WasmFunction() {
  // @@protoc_insertion_point(destructor:WasmFunction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WasmFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  func_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete func_type_;
}

void WasmFunction::ArenaDtor(void* object) {
  WasmFunction* _this = reinterpret_cast< WasmFunction* >(object);
  (void)_this;
}
void WasmFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WasmFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WasmFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:WasmFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  func_body_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && func_type_ != nullptr) {
    delete func_type_;
  }
  func_type_ = nullptr;
  ::memset(&is_imported_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&body_length_) -
      reinterpret_cast<char*>(&is_imported_)) + sizeof(body_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WasmFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_imported = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_imported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes func_body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_func_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 body_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          body_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FunctionType func_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_func_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WasmFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WasmFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_imported = 1;
  if (this->_internal_is_imported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_imported(), target);
  }

  // bytes func_body = 2;
  if (!this->_internal_func_body().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_func_body(), target);
  }

  // uint32 body_length = 3;
  if (this->_internal_body_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_body_length(), target);
  }

  // .FunctionType func_type = 4;
  if (this->_internal_has_func_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::func_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WasmFunction)
  return target;
}

size_t WasmFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WasmFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes func_body = 2;
  if (!this->_internal_func_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_func_body());
  }

  // .FunctionType func_type = 4;
  if (this->_internal_has_func_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *func_type_);
  }

  // bool is_imported = 1;
  if (this->_internal_is_imported() != 0) {
    total_size += 1 + 1;
  }

  // uint32 body_length = 3;
  if (this->_internal_body_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_body_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WasmFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WasmFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WasmFunction::GetClassData() const { return &_class_data_; }

void WasmFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WasmFunction *>(to)->MergeFrom(
      static_cast<const WasmFunction &>(from));
}


void WasmFunction::MergeFrom(const WasmFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WasmFunction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_func_body().empty()) {
    _internal_set_func_body(from._internal_func_body());
  }
  if (from._internal_has_func_type()) {
    _internal_mutable_func_type()->::FunctionType::MergeFrom(from._internal_func_type());
  }
  if (from._internal_is_imported() != 0) {
    _internal_set_is_imported(from._internal_is_imported());
  }
  if (from._internal_body_length() != 0) {
    _internal_set_body_length(from._internal_body_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WasmFunction::CopyFrom(const WasmFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WasmFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WasmFunction::IsInitialized() const {
  return true;
}

void WasmFunction::InternalSwap(WasmFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &func_body_, lhs_arena,
      &other->func_body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WasmFunction, body_length_)
      + sizeof(WasmFunction::body_length_)
      - PROTOBUF_FIELD_OFFSET(WasmFunction, func_type_)>(
          reinterpret_cast<char*>(&func_type_),
          reinterpret_cast<char*>(&other->func_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WasmFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_jacaranda_2eproto_getter, &descriptor_table_jacaranda_2eproto_once,
      file_level_metadata_jacaranda_2eproto[5]);
}

// ===================================================================

class NativeBinary::_Internal {
 public:
};

NativeBinary::NativeBinary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:NativeBinary)
}
NativeBinary::NativeBinary(const NativeBinary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_bytes().empty()) {
    data_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_bytes(), 
      GetArenaForAllocation());
  }
  data_length_ = from.data_length_;
  // @@protoc_insertion_point(copy_constructor:NativeBinary)
}

inline void NativeBinary::SharedCtor() {
data_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_length_ = 0u;
}

NativeBinary::~NativeBinary() {
  // @@protoc_insertion_point(destructor:NativeBinary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NativeBinary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NativeBinary::ArenaDtor(void* object) {
  NativeBinary* _this = reinterpret_cast< NativeBinary* >(object);
  (void)_this;
}
void NativeBinary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NativeBinary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NativeBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:NativeBinary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_bytes_.ClearToEmpty();
  data_length_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NativeBinary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          data_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NativeBinary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NativeBinary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data_bytes = 1;
  if (!this->_internal_data_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data_bytes(), target);
  }

  // uint32 data_length = 2;
  if (this->_internal_data_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NativeBinary)
  return target;
}

size_t NativeBinary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NativeBinary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_bytes = 1;
  if (!this->_internal_data_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_bytes());
  }

  // uint32 data_length = 2;
  if (this->_internal_data_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_data_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NativeBinary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NativeBinary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NativeBinary::GetClassData() const { return &_class_data_; }

void NativeBinary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NativeBinary *>(to)->MergeFrom(
      static_cast<const NativeBinary &>(from));
}


void NativeBinary::MergeFrom(const NativeBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NativeBinary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data_bytes().empty()) {
    _internal_set_data_bytes(from._internal_data_bytes());
  }
  if (from._internal_data_length() != 0) {
    _internal_set_data_length(from._internal_data_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NativeBinary::CopyFrom(const NativeBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NativeBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeBinary::IsInitialized() const {
  return true;
}

void NativeBinary::InternalSwap(NativeBinary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_bytes_, lhs_arena,
      &other->data_bytes_, rhs_arena
  );
  swap(data_length_, other->data_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NativeBinary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_jacaranda_2eproto_getter, &descriptor_table_jacaranda_2eproto_once,
      file_level_metadata_jacaranda_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IndicesRequest* Arena::CreateMaybeMessage< ::IndicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IndicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FunctionIndices* Arena::CreateMaybeMessage< ::FunctionIndices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FunctionIndices >(arena);
}
template<> PROTOBUF_NOINLINE ::FunctionType* Arena::CreateMaybeMessage< ::FunctionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FunctionType >(arena);
}
template<> PROTOBUF_NOINLINE ::CompilationRequest* Arena::CreateMaybeMessage< ::CompilationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CompilationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CodeRequest* Arena::CreateMaybeMessage< ::CodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::WasmFunction* Arena::CreateMaybeMessage< ::WasmFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WasmFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::NativeBinary* Arena::CreateMaybeMessage< ::NativeBinary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NativeBinary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
